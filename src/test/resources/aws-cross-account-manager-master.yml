AWSTemplateFormatVersion: '2010-09-09'
Description: '(SO0015) - Cross-Account Manager Solution: Master Account template '
Parameters:
  ConfigBucket:
    Description: Name of the Bucket to input files for the solution
    Type: String
    Default: ''
  AccessLinksBucket:
    Description: Name of the Bucket to store the Access Links page with shortucts
      to all the Sub-Accounts/Roles managed by the solution
    Type: String
    Default: ''
  SendAnonymousData:
    Description: Send anonymous data to AWS
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Bucket Configuration
        Parameters:
          - ConfigBucket
          - AccessLinksBucket
      - Label:
          default: Anonymous Metrics Request
        Parameters:
          - SendAnonymousData
Conditions:
  SendData: !Equals
    - !Ref 'SendAnonymousData'
    - 'Yes'
Resources:
  AccountFileHandlerExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  AccountFileHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
          - ''
          - - solutions-
            - !Ref 'AWS::Region'
        S3Key: cross-account-manager/v1/cross-account-handler.zip
      Description: This event-triggered Lambda function monitors S3 bucket and SNS
        topic for Account related activities e.g. onboarding, offboarding.
      Handler: index.handleAccountS3File
      Role: !GetAtt 'AccountFileHandlerExecRole.Arn'
      Runtime: nodejs4.3
      Timeout: '300'
  AccountEventHandlerExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  AccountEventHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
          - ''
          - - solutions-
            - !Ref 'AWS::Region'
        S3Key: cross-account-manager/v1/cross-account-handler.zip
      Description: This event-triggered Lambda function monitors S3 bucket and SNS
        topic for Account related activities e.g. onboarding, offboarding.
      Handler: index.handleAccountEvent
      Role: !GetAtt 'AccountEventHandlerExecRole.Arn'
      Runtime: nodejs4.3
      Timeout: '300'
  RoleFileHandlerExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  RoleFileHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
          - ''
          - - solutions-
            - !Ref 'AWS::Region'
        S3Key: cross-account-manager/v1/cross-account-handler.zip
      Description: This event-triggered Lambda function monitors S3 bucket for Role
        related activities e.g. onboarding, offboarding.
      Handler: index.handleRoleS3File
      Role: !GetAtt 'RoleFileHandlerExecRole.Arn'
      Runtime: nodejs4.3
      Timeout: '300'
  RoleEventHandlerExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CrossAccountManager-Admin-DO-NOT-DELETE
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CrossAccountAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource:
                  - arn:aws:iam::*:role/CrossAccountManager-*
                Action:
                  - sts:*
  RoleEventHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
          - ''
          - - solutions-
            - !Ref 'AWS::Region'
        S3Key: cross-account-manager/v1/cross-account-handler.zip
      Description: This event-triggered Lambda function monitors Role Topic for Role
        related activities e.g. onboarding, offboarding.
      Handler: index.handleRoleEvent
      Role: !GetAtt 'RoleEventHandlerExecRole.Arn'
      Runtime: nodejs4.3
      Timeout: '300'
  SolutionHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3_Permission
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutBucketNotification
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'CAMConfigBucket'
                    - /*
  SolutionHelper:
    Type: AWS::Lambda::Function
    DependsOn: CloudwatchLogsCloudformationPolicy
    Properties:
      Handler: solution-helper.lambda_handler
      Role: !GetAtt 'SolutionHelperRole.Arn'
      Description: This function creates a CloudFormation custom lambda resource that
        creates custom lambda functions by finding and replacing specific values from
        existing lambda function code.
      Code:
        S3Bucket: !Join
          - ''
          - - solutions-
            - !Ref 'AWS::Region'
        S3Key: library/solution-helper/v3/solution-helper.zip
      Runtime: python2.7
      Timeout: '300'
  InitMasterAccountExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  InitMasterAccount:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
          - ''
          - - solutions-
            - !Ref 'AWS::Region'
        S3Key: cross-account-manager/v1/cross-account-handler.zip
      Description: This Lambda function handles the Master Account initialization
        and destruction logic
      Handler: index.handleMasterAccountInit
      Role: !GetAtt 'InitMasterAccountExecRole.Arn'
      Runtime: nodejs4.3
      Timeout: '60'
  AccessLinksHandlerExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  AccessLinksHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
          - ''
          - - solutions-
            - !Ref 'AWS::Region'
        S3Key: cross-account-manager/v1/cross-account-handler.zip
      Description: This event-triggered Lambda function monitors DynamoDB table Account-Roles
        and updates the static access links page
      Handler: index.handleAccessLinksEvent
      Role: !GetAtt 'AccessLinksHandlerExecRole.Arn'
      Runtime: nodejs4.3
      Timeout: '300'
  CloudwatchLogsCloudformationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref 'SolutionHelperRole'
        - !Ref 'AccountFileHandlerExecRole'
        - !Ref 'RoleFileHandlerExecRole'
        - !Ref 'AccessLinksHandlerExecRole'
        - !Ref 'AccountEventHandlerExecRole'
        - !Ref 'RoleEventHandlerExecRole'
        - !Ref 'InitMasterAccountExecRole'
      PolicyName: Cloudwatch_Logs_Permissions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join
              - ''
              - - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - :log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - cloudformation:DescribeStacks
            Resource: '*'
  AccessLinksHandlerExecRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref 'AccessLinksHandlerExecRole'
      PolicyName: AccessLink_Permissions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'AccessLinkBucket'
                - /
                - '*'
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
              - s3:GetBucketTagging
            Resource: arn:aws:s3:::*
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
            Resource: !Join
              - ''
              - - 'arn:aws:dynamodb:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - :table/CrossAccountManager-*
  S3DynamoDBSNSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref 'AccountFileHandlerExecRole'
        - !Ref 'RoleFileHandlerExecRole'
        - !Ref 'AccountEventHandlerExecRole'
        - !Ref 'RoleEventHandlerExecRole'
      PolicyName: S3_DynamoDB_SNS_Permissions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:DeleteObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'CAMConfigBucket'
                - /
                - '*'
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:Scan
            Resource:
              - !Join
                - ''
                - - 'arn:aws:dynamodb:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :table/CrossAccountManager-*
          - Effect: Allow
            Action:
              - sns:AddPermission
              - sns:RemovePermission
            Resource: !Join
              - ''
              - - 'arn:aws:sns:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - :CrossAccountManager-AccountTopic
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Join
                - ''
                - - 'arn:aws:sns:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :CrossAccountManager-RoleTopic
              - !Join
                - ''
                - - 'arn:aws:sns:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :CrossAccountManager-AccessLinksTopic
  IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref 'AccountEventHandlerExecRole'
        - !Ref 'RoleEventHandlerExecRole'
        - !Ref 'RoleFileHandlerExecRole'
        - !Ref 'InitMasterAccountExecRole'
      PolicyName: IAM_Permissions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
              - iam:GetRolePolicy
            Resource: !Join
              - ''
              - - 'arn:aws:iam:'
                - ':'
                - !Ref 'AWS::AccountId'
                - :role/CrossAccountManager-*
          - Effect: Allow
            Action:
              - iam:ListRoles
            Resource: !Join
              - ''
              - - 'arn:aws:iam:'
                - ':'
                - !Ref 'AWS::AccountId'
                - :role/
  AccountTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CrossAccountManager-AccountTopic
      DisplayName: CrossAccountManager-AccountTopic
      Subscription:
        - Endpoint: !GetAtt 'AccountEventHandler.Arn'
          Protocol: lambda
  RoleTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CrossAccountManager-RoleTopic
      DisplayName: CrossAccountManager-RoleTopic
      Subscription:
        - Endpoint: !GetAtt 'RoleEventHandler.Arn'
          Protocol: lambda
  AccessLinksTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CrossAccountManager-AccessLinksTopic
      DisplayName: CrossAccountManager-AccessLinksTopic
      Subscription:
        - Endpoint: !GetAtt 'AccessLinksHandler.Arn'
          Protocol: lambda
  AccessLinksHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'AccessLinksHandler.Arn'
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'AccessLinksTopic'
  AccountEventHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'AccountEventHandler.Arn'
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'AccountTopic'
  AccountFileHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'AccountFileHandler.Arn'
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:s3:::'
          - !Ref 'ConfigBucket'
  RoleFileHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'RoleFileHandler.Arn'
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:s3:::'
          - !Ref 'ConfigBucket'
  RoleEventHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'RoleEventHandler.Arn'
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'RoleTopic'
  AccessLinkBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref 'AccessLinksBucket'
      VersioningConfiguration:
        Status: Enabled
  CAMConfigBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    DependsOn:
      - AccountFileHandlerInvokePermission
      - RoleFileHandlerInvokePermission
    Properties:
      BucketName: !Ref 'ConfigBucket'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt 'AccountFileHandler.Arn'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: account
                  - Name: suffix
                    Value: .yml
          - Event: s3:ObjectCreated:*
            Function: !GetAtt 'AccountFileHandler.Arn'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: account
                  - Name: suffix
                    Value: .yaml
          - Event: s3:ObjectCreated:*
            Function: !GetAtt 'RoleFileHandler.Arn'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: role
                  - Name: suffix
                    Value: .yml
          - Event: s3:ObjectCreated:*
            Function: !GetAtt 'RoleFileHandler.Arn'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: role
                  - Name: suffix
                    Value: .yaml
  CAMConfigBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'CAMConfigBucket'
      PolicyDocument:
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'CAMConfigBucket'
                  - /account
                  - '*'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'CAMConfigBucket'
                  - /role
                  - '*'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'CAMConfigBucket'
                  - /custom_policy
                  - '*'
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: aws:kms
          - Action:
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectAcl
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'CAMConfigBucket'
                  - /account
                  - '*'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'CAMConfigBucket'
                  - /role
                  - '*'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'CAMConfigBucket'
                  - /custom_policy
                  - '*'
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - :root
  CAMKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Account Management CMK for S3 SSE-KMS
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: CrossAccountManager-key-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - :root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt 'SolutionHelperRole.Arn'
                - !GetAtt 'AccountFileHandlerExecRole.Arn'
                - !GetAtt 'RoleFileHandlerExecRole.Arn'
                - !GetAtt 'AccountEventHandlerExecRole.Arn'
                - !GetAtt 'AccessLinksHandlerExecRole.Arn'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
  CAMKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/CrossAccountManager-Key
      TargetKeyId: !Ref 'CAMKey'
  CAMConfigBucketS3Folders:
    Type: Custom::SolutionHelper
    DependsOn:
      - CAMConfigBucket
    Properties:
      ServiceToken: !GetAtt 'SolutionHelper.Arn'
      StoreInS3KMS: !Join
        - ''
        - - '[{ ''Bucket'' : '''
          - !Ref 'CAMConfigBucket'
          - ''', '
          - '''Key'' : ''account/'', '
          - '''SSEKMSKeyId'' : ''arn:aws:kms:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - :key/
          - !Ref 'CAMKey'
          - ''', '
          - '''Body'': '''''
          - '},{ ''Bucket'' : '''
          - !Ref 'CAMConfigBucket'
          - ''', '
          - '''Key'' : ''role/'', '
          - '''SSEKMSKeyId'' : ''arn:aws:kms:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - :key/
          - !Ref 'CAMKey'
          - ''', '
          - '''Body'': '''''
          - '},{ ''Bucket'' : '''
          - !Ref 'CAMConfigBucket'
          - ''', '
          - '''Key'' : ''custom_policy/'', '
          - '''SSEKMSKeyId'' : ''arn:aws:kms:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - :key/
          - !Ref 'CAMKey'
          - ''', '
          - '''Body'': '''''
          - '}]'
  CreateAccountsDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: AccountId
          AttributeType: S
      KeySchema:
        - AttributeName: AccountId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: CrossAccountManager-Accounts
  CreateRolesDDBTable:
    Properties:
      AttributeDefinitions:
        - AttributeName: Role
          AttributeType: S
      KeySchema:
        - AttributeName: Role
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: CrossAccountManager-Roles
    Type: AWS::DynamoDB::Table
  CreateAccountRolesDDBTable:
    Properties:
      AttributeDefinitions:
        - AttributeName: Role
          AttributeType: S
        - AttributeName: AccountId
          AttributeType: S
      KeySchema:
        - AttributeName: Role
          KeyType: HASH
        - AttributeName: AccountId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: CrossAccountManager-Account-Roles
    Type: AWS::DynamoDB::Table
  SendingAnonymousData:
    Type: Custom::LoadLambda
    Condition: SendData
    Properties:
      ServiceToken: !GetAtt 'SolutionHelper.Arn'
      SendAnonymousData: !Join
        - ''
        - - '{ ''Solution'' : '''
          - SO0015
          - ''', '
          - '''UUID'' : '''
          - !GetAtt 'CreateUniqueID.UUID'
          - ''', '
          - '''Data'': {'
          - '''Version'': ''1''}'
          - '}'
  CreateUniqueID:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt 'SolutionHelper.Arn'
      Region: !Ref 'AWS::Region'
      CreateUniqueID: 'true'
  InitMasterAccountCustomResource:
    Type: Custom::InitMasterAccountCustomResource
    DependsOn:
      - CloudwatchLogsCloudformationPolicy
    Properties:
      ServiceToken: !GetAtt 'InitMasterAccount.Arn'
Outputs:
  CAMConfigBucket:
    Description: S3 bucket to input files for the solution
    Value: !Ref 'CAMConfigBucket'
  AccessLinksBucket:
    Description: S3 bucket for storing the Access Links page with shortucts to all
      the Sub-Accounts/Roles managed by the solution
    Value: !Ref 'AccessLinkBucket'
  KMSKeyAlias:
    Description: KMS Customer Master Key to upload files to S3 Config bucket
    Value: !Ref 'CAMKeyAlias'
  UUID:
    Description: Newly created random UUID.
    Value: !GetAtt 'CreateUniqueID.UUID'
  AnonymousData:
    Description: Send Anonymous Data
    Value: !Ref 'SendAnonymousData'
